// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String            @id @default(uuid())
  parent_id                String?
  parent                   User?             @relation("ParentChilds", fields: [parent_id], references: [id])
  childs                   User[]            @relation("ParentChilds")
  permissions              user_permission[]
  phone                    String            @unique
  email                    String            @unique
  first_name               String?
  last_name                String?
  birthday                 DateTime?
  place_Birth              String?
  cni_umber                String?
  image                    String?
  password                 String
  roleId                   Int
  grade_id                 Int?
  grade                    Grade?            @relation(fields: [grade_id], references: [id])
  driver_type_id           Int?
  driver_type              DriverType?       @relation(fields: [driver_type_id], references: [id])
  city_id                  Int?
  city                     City?             @relation(fields: [city_id], references: [id])
  role                     Role              @relation(fields: [roleId], references: [id])
  token                    Token[]           @relation(name: "token_user_ship")
  tags                     UsersOnTags[]
  account_id               String?
  account                  Account?          @relation(fields: [account_id], references: [id], name: "user_in_account")
  driver_licence_number    String?           @unique
  driver_licence_type      String?
  country_licence_delivery String?
  issue_delivery_on        DateTime?
  expire_delivery_at       DateTime?
  daily_recipe             Int?
  currency                 String?
  blocked_at               DateTime?
  suspended                Boolean           @default(false)
  blocked_reason           String?           @db.Text
  verified_at              DateTime?
  deleted_at               DateTime?
  created_at               DateTime          @default(now())
  updated_at               DateTime          @updatedAt
  Region                   Region?           @relation(fields: [regionId], references: [id])
  regionId                 Int?
  Vehicle_principal        Vehicle?          @relation(name: "vehicle_principal_driver")
  Vehicle_interimaire      Vehicle?          @relation(name: "vehicle_interimaire_driver")
  rapport                  rapport[]
  hisAcount                Account?          @relation(name: "AccountOwner")
  AdminRegion              AdminRegion[]
  regions                  Region[]          @relation(name: "AdminRegion")
}

model Account {
  id            String         @id @default(uuid())
  status        Boolean        @default(false)
  activated_at  DateTime?
  created_at    DateTime       @default(now())
  blocked_at    DateTime?
  updated_at    DateTime       @updatedAt
  regions       Region[]
  users         User[]         @relation(name: "user_in_account")
  brands        Brand[]
  vehicleOwners VehicleOwner[]
  owner_id      String         @unique
  owner         User           @relation(fields: [owner_id], references: [id], name: "AccountOwner")
}

model Region {
  id          Int           @id @default(autoincrement())
  name        String
  zone        String?
  latitude    Int?
  longitude   Int?
  account_id  String?
  account     Account?      @relation(fields: [account_id], references: [id])
  users       User[]
  vehicles    Vehicle[]
  suppliers   Supplier[]
  AdminRegion AdminRegion[]
  admins      User[]        @relation(name: "AdminRegion")
}

model AdminRegion {
  admin_id  String
  admin     User   @relation(fields: [admin_id], references: [id])
  region_id Int
  region    Region @relation(fields: [region_id], references: [id])

  @@id([region_id, admin_id])
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[]
}

model rapport {
  id          Int       @id @default(autoincrement())
  description String
  created_at  DateTime?
  user_id     String
  user        User      @relation(fields: [user_id], references: [id])
}

model Vehicle {
  id                        Int                 @id @default(autoincrement())
  region_id                 Int
  region                    Region              @relation(fields: [region_id], references: [id])
  chassis_number            String              @unique
  color_id                  Int
  color                     carColor            @relation(fields: [color_id], references: [id])
  brand_id                  Int
  brand                     Brand               @relation(fields: [brand_id], references: [id])
  model_id                  Int
  model                     CarModel            @relation(fields: [model_id], references: [id])
  principal_driver_id       String?             @unique
  principal_driver          User?               @relation(fields: [principal_driver_id], references: [id], name: "vehicle_principal_driver")
  interimaire_driver_id     String?             @unique
  interimaire_driver        User?               @relation(fields: [interimaire_driver_id], references: [id], name: "vehicle_interimaire_driver")
  gps_number                String?             @unique
  registration_number       String              @unique
  insurance_subscription_at DateTime
  circulation_at            DateTime
  entry_fleet_at            DateTime
  mileage                   Int
  daily_recipe              Int?
  currency_id               Int
  currency                  Currency            @relation(fields: [currency_id], references: [id])
  contract_type_id          Int
  contract_type             VehicleContractType @relation(fields: [contract_type_id], references: [id])
  owner_id                  Int
  owner                     VehicleOwner        @relation(fields: [owner_id], references: [id])
  desactivated              Boolean             @default(false)
  desactivate_at            DateTime?
  status                    String
  vehicle_type_id           Int
  vehicle_type              VehicleType         @relation(fields: [vehicle_type_id], references: [id])
  vehicle_class_id          Int?
  vehicle_class             VehicleClass?       @relation(fields: [vehicle_class_id], references: [id])
  vehicle_image_id          Int?                @unique
  vehicle_image             Image?              @relation(fields: [vehicle_image_id], references: [id])
  images_presentation       Image[]             @relation("vehicle_images")
  passation_images          Image[]             @relation("PassationImages")
  maintenance_images        Image[]             @relation("MaintenanceImages")
}

model VehicleType {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  vehicles Vehicle[]
}

model VehicleContractType {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  vehicles Vehicle[]
}

model Currency {
  id           Int       @id @default(autoincrement())
  name         String    @unique
  country_code String    @unique
  vihicles     Vehicle[]
}

model VehicleClass {
  id           Int       @id @default(autoincrement())
  name         String
  daily_recipe Int
  vihicles     Vehicle[]
}

model Supplier {
  id                   Int              @id @default(autoincrement())
  logo                 String?
  business_name        String
  social_reason        String
  niu                  String?
  phone                String?
  email                String?
  region_id            Int
  region               Region           @relation(fields: [region_id], references: [id])
  supplier_category_id Int
  activity_category    SupplierCategory @relation(fields: [supplier_category_id], references: [id])
  city                 String?
  street               String?
  created_at           DateTime         @default(now())
  updated_at           DateTime         @updatedAt
}

model SupplierCategory {
  id        Int        @id @default(autoincrement())
  name      String
  suppliers Supplier[]
}

model VehicleOwner {
  id                    Int       @id @default(autoincrement())
  first_name            String
  last_name             String
  cni_number            String    @unique
  driver_licence_number String
  account_id            String
  account               Account   @relation(fields: [account_id], references: [id])
  vehicles              Vehicle[]
}

model Brand {
  id         Int        @id @default(autoincrement())
  name       String
  account_id String
  account    Account    @relation(fields: [account_id], references: [id])
  vehicle    Vehicle[]
  model      CarModel[]

  @@unique([account_id, name])
}

model Image {
  id                  Int       @id @default(autoincrement())
  path                String
  width               Int
  height              Int
  size                Int
  format              String?
  vehicleProfile      Vehicle?
  vehicleImages       Vehicle[] @relation("vehicle_images")
  passationVehicles   Vehicle[] @relation("PassationImages")
  maintenanceVehicles Vehicle[] @relation("MaintenanceImages")
}

model CarModel {
  id       Int       @id @default(autoincrement())
  name     String
  brand_id Int
  brand    Brand     @relation(fields: [brand_id], references: [id])
  vehicle  Vehicle[]
}

model carColor {
  id      Int       @id @default(autoincrement())
  name    String    @unique
  vehicle Vehicle[]
}

model City {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[]
}

model DriverType {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[]
}

model Grade {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[]
}

model Tag {
  id    Int           @id @default(autoincrement())
  name  String
  users UsersOnTags[]
}

model UsersOnTags {
  user_id     String
  user        User     @relation(fields: [user_id], references: [id])
  tag_id      Int
  tag         Tag      @relation(fields: [tag_id], references: [id])
  assigne_at  DateTime @default(now())
  assigned_by String?

  @@id([user_id, tag_id])
}

model Token {
  id        Int      @id @default(autoincrement())
  userId    String
  user      User     @relation(fields: [userId], references: [id], name: "token_user_ship")
  jwt       String   @db.Text
  expireIn  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model permission {
  name  String            @id
  users user_permission[]
}

model user_permission {
  user_id       String
  user          User       @relation(fields: [user_id], references: [id])
  permission_id String
  permission    permission @relation(fields: [permission_id], references: [name])

  @@id([user_id, permission_id])
}

model Otp {
  id        Int    @id @default(autoincrement())
  otp       Int
  userEmail String
  expiredIn Int
}

model Password {
  id          Int      @id @default(autoincrement())
  userEmail   String
  newPassword String
  createdAt   DateTime @default(now())
}
